// <auto-generated />
using System;
using IVC.PE.DATA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IVC.PE.DATA.Migrations
{
    [DbContext(typeof(IvcDbContext))]
    [Migration("20210310174955_ProviderFoldingTransport")]
    partial class ProviderFoldingTransport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Aggregation.Quarry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Quarries");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.BusinessResponsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessResponsibles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalDocumentationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfRenovations")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("LegalDocumentationTypeId");

                    b.ToTable("LegalDocumentations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysLimitTerm")
                        .HasColumnType("int");

                    b.Property<Guid>("LegalDocumentationRenovationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalDocumentationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("LegalDocumentationRenovationId");

                    b.HasIndex("LegalDocumentationTypeId");

                    b.ToTable("LegalDocumentationLoads");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationRenovation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Days5")
                        .HasColumnType("bit");

                    b.Property<int>("DaysLimitTerm")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTheLast")
                        .HasColumnType("bit");

                    b.Property<Guid>("LegalDocumentationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LegalDocumentationOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LegalDocumentationId");

                    b.ToTable("LegalDocumentationRenovations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationRenovationApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegalDocumentationRenovationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegalDocumentationRenovationId");

                    b.ToTable("LegalDocumentationRenovationApplicationUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LegalDocumentationTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CIPNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfRenovations")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.SkillRenovation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Days15")
                        .HasColumnType("bit");

                    b.Property<bool>("Days30")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTheLast")
                        .HasColumnType("bit");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SkillOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillRenovations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.SkillRenovationApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillRenovationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SkillRenovationId");

                    b.ToTable("SkillRenovationApplicationUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.IssuerTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("IssuerTargets");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IssuerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResponseTermDays")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IssuerId");

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterDocumentCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentStyle")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("LetterDocumentCharacteristics");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterInterestGroup", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterestGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LetterId", "InterestGroupId");

                    b.HasIndex("InterestGroupId");

                    b.ToTable("LetterInterestGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterIssuerTarget", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssuerTargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LetterId", "IssuerTargetId");

                    b.HasIndex("IssuerTargetId");

                    b.ToTable("LetterIssuerTargets");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterLetter", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LetterId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("LetterLetters");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterStatus", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LetterDocumentCharacteristicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LetterId", "LetterDocumentCharacteristicId");

                    b.ToTable("LetterStatus");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.Workbook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PdfFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WordFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workbooks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.WorkbookSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Answered")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkbookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WroteBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkbookId");

                    b.ToTable("WorkbookSeats");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Propietary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentMachineryCharacteristics");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryOperator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DNIOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentMachineryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentMachineryTypeSoftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentMachineryTypeTransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentMachineryTypeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOtherDNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOtherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOtherPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HiringType")
                        .HasColumnType("int");

                    b.Property<int>("IsFrom")
                        .HasColumnType("int");

                    b.Property<string>("OperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachineryTypeId");

                    b.HasIndex("EquipmentMachineryTypeSoftId");

                    b.HasIndex("EquipmentMachineryTypeTransportId");

                    b.HasIndex("EquipmentMachineryTypeTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("WorkerId");

                    b.ToTable("EquipmentMachineryOperators");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryResponsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentMachineryResponsibles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateInsurance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateSOAT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTechnicalRevision")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentProviderFoldingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EquipmentSerie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceSOATFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceTechnicalRevisionFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceCondition")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDateInsurance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDateSOAT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDateTechnicalRevision")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentProviderFoldingId");

                    b.HasIndex("EquipmentProviderId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentMachinerySofts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentMachinerySoftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachinerySoftId");

                    b.ToTable("EquipmentMachinerySoftApplicationUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentMachinerySoftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentMachineryTypeSoftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachinerySoftId");

                    b.HasIndex("EquipmentMachineryTypeSoftId");

                    b.HasIndex("EquipmentProviderId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentMachinerySoftParts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPartFolding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndMileage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentMachineryOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentMachinerySoftPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentMachineryTypeSoftActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitMileage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specific")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachineryOperatorId");

                    b.HasIndex("EquipmentMachinerySoftPartId");

                    b.HasIndex("EquipmentMachineryTypeSoftActivityId");

                    b.ToTable("EquipmentMachinerySoftPartFoldings");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPartPlus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentMachinerySoftPartFoldingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentMachineryTypeSoftActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachinerySoftPartFoldingId");

                    b.HasIndex("EquipmentMachineryTypeSoftActivityId");

                    b.ToTable("EquipmentMachinerySoftPartPlusUltra");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentMachineryTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentMachineryTypeSofts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoftActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentMachineryTypeSoftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachineryTypeSoftId");

                    b.ToTable("EquipmentMachineryTypeSoftActivites");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTransport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentMachineryTypeTransports");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTransportActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentMachineryTypeTransportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachineryTypeTransportId");

                    b.ToTable("EquipmentMachineryTypeTransportActivities");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentMachineryTypeTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTypeActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentMachineryTypeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachineryTypeTypeId");

                    b.ToTable("EquipmentMachineryTypeTypeActivities");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProviderId");

                    b.ToTable("EquipmentProviders");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProviderFolding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentMachineryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentMachineryTypeSoftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentMachineryTypeTransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentMachineryTypeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentMachineryTypeId");

                    b.HasIndex("EquipmentMachineryTypeSoftId");

                    b.HasIndex("EquipmentMachineryTypeTransportId");

                    b.HasIndex("EquipmentMachineryTypeTypeId");

                    b.HasIndex("EquipmentProviderId");

                    b.ToTable("EquipmentProviderFoldings");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.FuelProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CisternPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CisternPlate2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProviderId");

                    b.ToTable("FuelProviders");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondAdd", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BondGuarantorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BondNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BondTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfRenovations")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BondGuarantorId");

                    b.HasIndex("BondTypeId");

                    b.HasIndex("BudgetTitleId");

                    b.HasIndex("ProjectId");

                    b.ToTable("BondAdds");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondAddProjectResponsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BondAddProjectResponsibles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BondRenovationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BondRenovationId");

                    b.ToTable("BondFiles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondGuarantor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BondGuarantors");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BondGuarantorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BondNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BondRenovationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BondTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PenAmmount")
                        .HasColumnType("float");

                    b.Property<double>("UsdAmmount")
                        .HasColumnType("float");

                    b.Property<int>("daysLimitTerm")
                        .HasColumnType("int");

                    b.Property<string>("guaranteeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BondGuarantorId");

                    b.HasIndex("BondRenovationId");

                    b.HasIndex("BondTypeId");

                    b.HasIndex("BudgetTitleId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BondLoads");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondRenovation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BondAddId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BondOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Days15")
                        .HasColumnType("bit");

                    b.Property<bool>("Days30")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTheLast")
                        .HasColumnType("bit");

                    b.Property<double>("PenAmmount")
                        .HasColumnType("float");

                    b.Property<double>("UsdAmmount")
                        .HasColumnType("float");

                    b.Property<string>("currencyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("daysLimitTerm")
                        .HasColumnType("int");

                    b.Property<string>("guaranteeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BondAddId");

                    b.ToTable("BondRenovations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondRenovationApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BondRenovationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BondRenovationId");

                    b.ToTable("BondRenovationApplicationUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BondTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("BelongsToMainOffice")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("NoEmail")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("WorkArea")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WorkPositionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserInterestGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("InterestGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "InterestGroupId");

                    b.HasIndex("InterestGroupId");

                    b.ToTable("UserInterestGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.CertificateIssuer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CertificateIssuers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PillColor")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.Foreman", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Foremen");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("InterestGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroupEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InterestGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InterestGroupId");

                    b.ToTable("InterestGroupEmails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProjectCollaborators");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectFormula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFormulas");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectFormulaActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MeasurementUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectFormulaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProjectFormulaId");

                    b.ToTable("ProjectFormulaActivities");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectFormulaSewerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectFormulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFormulaId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("ProjectFormulaSewerGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectHabilitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationCode")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectHabilitations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectPhase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.QualificationZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("QualificationZones");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.SystemPhase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SystemPhases");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PillColor")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorkComponents");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFront", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SystemPhaseId");

                    b.ToTable("WorkFronts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFrontHead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkFrontHeads");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkPositions");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PillColor")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorkStructures");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntryPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PensionFundAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PensionFundUniqueIdentificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPositionId");

                    b.HasIndex("EntryPositionId");

                    b.HasIndex("PensionFundAdministratorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollAuthorizationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PayrollUserAuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskUserAuth1Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskUserAuth2Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WeeklyPayrollAuth")
                        .HasColumnType("bit");

                    b.Property<bool>("WeeklyTaskAuth1")
                        .HasColumnType("bit");

                    b.Property<bool>("WeeklyTaskAuth2")
                        .HasColumnType("bit");

                    b.Property<bool>("isPayrollOk")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PayrollAuthorizationRequests");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollConcept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayrollConcepts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollConceptFormula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAffectedToAfp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToEsSalud")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToOnp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToQta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToRetJud")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputableToCTS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputableToGrati")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputableToVacac")
                        .HasColumnType("bit");

                    b.Property<int>("LaborRegimeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PayrollConceptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayrollVariableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollConceptId");

                    b.HasIndex("PayrollVariableId");

                    b.ToTable("PayrollConceptFormulas");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("PayrollConceptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayrollMovementHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollConceptId");

                    b.HasIndex("PayrollMovementHeaderId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PayrollMovementDetails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectCalendarWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarWeekId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PayrollMovementHeaders");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DollarExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("EsSaludMasVidaCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaximumInsurableRemuneration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SCTRRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("UIT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnionFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PayrollParameters");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollPensionFundAdministratorRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DisabilityInsuranceRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EarlyRetirementRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FlowComissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FundRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MixedComissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PayrollMovementHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PensionFundAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollMovementHeaderId");

                    b.HasIndex("PensionFundAdministratorId");

                    b.ToTable("PayrollPensionFundAdministratorRates");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PayrollVariables");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWeekSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OfficialCollaboratorCollaboratorCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialCollaboratorCollaboratorHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialCollaboratorPopulationCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialCollaboratorPopulationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialCollaboratorSyndicateCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialCollaboratorSyndicateHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialHomeIVCCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialHomeIVCHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialHomePopulationCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialHomePopulationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialHomeSyndicateCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialHomeSyndicateHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialTotalCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OfficialTotalHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorCollaboratorCollaboratorCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorCollaboratorCollaboratorHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorCollaboratorPopulationCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorCollaboratorPopulationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorCollaboratorSyndicateCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorCollaboratorSyndicateHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorHomeIVCCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorHomeIVCHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorHomePopulationCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorHomePopulationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorHomeSyndicateCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorHomeSyndicateHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorTotalCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatorTotalHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnCollaboratorCollaboratorCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnCollaboratorCollaboratorHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnCollaboratorPopulationCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnCollaboratorPopulationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnCollaboratorSyndicateCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnCollaboratorSyndicateHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnHomeIVCCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnHomeIVCHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnHomePopulationCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnHomePopulationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnHomeSyndicateCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnHomeSyndicateHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnTotalCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PawnTotalHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectCalendarWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAllCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAllHours")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarWeekId");

                    b.ToTable("PayrollWeekSummaries");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerCategoryWage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BUCRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DayWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PayrollMovementHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkerCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayrollMovementHeaderId");

                    b.ToTable("PayrollWorkerCategoryWages");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("PayrollMovementHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayrollVariableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollMovementHeaderId");

                    b.HasIndex("PayrollVariableId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PayrollWorkerVariables");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DisabilityInsuranceRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EarlyRetirementRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FlowComissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FundRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MixedComissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PensionFundAdministrators");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FirstDayOfThCalendar")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCalendars");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("MonthEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MonthStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("YearMonthNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarId");

                    b.ToTable("ProjectCalendarMonths");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WeekEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("YearWeekNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarId");

                    b.ToTable("ProjectCalendarWeeks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectPayrollResponsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Responsible1Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsible2Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsible3Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPayrollResponsibles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CeaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasEPS")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEsSaludPlusVida")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSctr")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUnionFee")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWeeklySettlement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("JudicialRetentionFixedAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JudicialRetentionPercentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LaborRegimen")
                        .HasColumnType("int");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("Origin")
                        .HasColumnType("int");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PensionFundAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PensionFundUniqueIdentificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SctrHealthType")
                        .HasColumnType("int");

                    b.Property<int>("SctrPensionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkerPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Workgroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PensionFundAdministratorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerGroupId");

                    b.HasIndex("WorkerPositionId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BUCRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DayWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WorkerCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkerCategories");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerCovidCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IgG")
                        .HasColumnType("int");

                    b.Property<int?>("IgM")
                        .HasColumnType("int");

                    b.Property<int?>("TestOutcome")
                        .HasColumnType("int");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerCovidChecks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerDailyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CeasedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Hours100Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Hours60Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursHoliday")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursMedicalRest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursNormal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursPaidLeave")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursPaternityLeave")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCeased")
                        .HasColumnType("bit");

                    b.Property<bool>("LaborSuspension")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicalLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("NonAttendance")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UnPaidLeave")
                        .HasColumnType("bit");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("SewerGroupId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerDailyTasks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerInvoiceSend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSended")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isReceived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerInvoiceSends");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerMedicalRest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerMedicalRests");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkerPositions");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerWorkPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CeaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasEPS")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEsSaludPlusVida")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSctr")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUnionFee")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWeeklySettlement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("JudicialRetentionFixedAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JudicialRetentionPercentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LaborRegimen")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("Origin")
                        .HasColumnType("int");

                    b.Property<Guid?>("PensionFundAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PensionFundUniqueIdentificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SctrHealthType")
                        .HasColumnType("int");

                    b.Property<int>("SctrPensionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkerPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Workgroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PensionFundAdministratorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkerId");

                    b.HasIndex("WorkerPositionId");

                    b.ToTable("WorkerWorkPeriods");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24FirstPartGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SewerManifoldFor24FirstPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor24FirstPartId");

                    b.ToTable("For24FirstPartGalleries");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24SecondPartAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SewerManifoldFor24SecondPartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor24SecondPartId");

                    b.ToTable("For24SecondPartActions");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24SecondPartEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EquipmentHours")
                        .HasColumnType("float");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentQuantity")
                        .HasColumnType("int");

                    b.Property<double>("EquipmentTotalHours")
                        .HasColumnType("float");

                    b.Property<Guid>("SewerManifoldFor24SecondPartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor24SecondPartId");

                    b.ToTable("For24SecondPartEquipments");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24SecondPartGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SewerManifoldFor24SecondPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor24SecondPartId");

                    b.ToTable("For24SecondPartGalleries");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.NewSIGProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("NewSIGProcesses");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldFor24FirstPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SewerManifoldFor24SecondPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SewerManifoldFor24ThirdpartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor24FirstPartId");

                    b.HasIndex("SewerManifoldFor24SecondPartId");

                    b.HasIndex("SewerManifoldFor24ThirdpartId");

                    b.ToTable("SewerManifoldFor24s");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24FirstPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Client")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NCOrigin")
                        .HasColumnType("int");

                    b.Property<Guid>("NewSIGProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OriginType")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReportUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsableUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsableUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewSIGProcessId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("SewerManifoldFor24FirstParts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24SecondPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Decision")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LaborerHoursMan")
                        .HasColumnType("float");

                    b.Property<int>("LaborerQuantity")
                        .HasColumnType("int");

                    b.Property<double>("LaborerTotalHoursMan")
                        .HasColumnType("float");

                    b.Property<double>("OfficialHoursMan")
                        .HasColumnType("float");

                    b.Property<int>("OfficialQuantity")
                        .HasColumnType("int");

                    b.Property<double>("OfficialTotalHoursMan")
                        .HasColumnType("float");

                    b.Property<double>("OperatorHoursMan")
                        .HasColumnType("float");

                    b.Property<int>("OperatorQuantity")
                        .HasColumnType("int");

                    b.Property<double>("OperatorTotalHoursMan")
                        .HasColumnType("float");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProposedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SewerManifoldFor24FirstPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor24FirstPartId");

                    b.ToTable("SewerManifoldFor24SecondParts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24ThirdPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionTaken")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreventiveCorrectiveAction")
                        .HasColumnType("bit");

                    b.Property<Guid>("SewerManifoldFor24SecondPartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor24SecondPartId");

                    b.ToTable("SewerManifoldFor24ThirdParts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.IsoStandard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IsoStandards");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileCount")
                        .HasColumnType("int");

                    b.Property<string>("RUC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.TechnicalLibraryFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("TechnicalLibraryFiles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountCCI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankAccountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionAreaContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionAreaEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionAreaPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForeignBankAccountCCI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForeignBankAccountCurrency")
                        .HasColumnType("int");

                    b.Property<string>("ForeignBankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForeignBankAccountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ForeignBankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LegalAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyServiceType")
                        .HasColumnType("int");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplyFamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxBankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxBankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tradename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ForeignBankId");

                    b.HasIndex("SupplyFamilyId");

                    b.HasIndex("SupplyGroupId");

                    b.HasIndex("TaxBankId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.BusinessFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessFiles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.MeasurementUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttentionStatus")
                        .HasColumnType("int");

                    b.Property<string>("BillTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrelativeCode")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuotationNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupportFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RequestId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Measure")
                        .HasColumnType("float");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RequestItemId");

                    b.HasIndex("SupplyId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountCCI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankAccountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionAreaContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionAreaEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionAreaPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForeignBankAccountCCI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForeignBankAccountCurrency")
                        .HasColumnType("int");

                    b.Property<string>("ForeignBankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForeignBankAccountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ForeignBankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LegalAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyServiceType")
                        .HasColumnType("int");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplyFamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxBankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxBankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tradename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ForeignBankId");

                    b.HasIndex("SupplyFamilyId");

                    b.HasIndex("SupplyGroupId");

                    b.HasIndex("TaxBankId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.ProviderFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderFiles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.ProviderSupplyFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyFamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SupplyFamilyId");

                    b.ToTable("ProviderSupplyFamilies");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.ProviderSupplyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SupplyGroupId");

                    b.ToTable("ProviderSupplyGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttentionStatus")
                        .HasColumnType("int");

                    b.Property<int>("BudgetType")
                        .HasColumnType("int");

                    b.Property<int>("CorrelativeCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplyFamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SupplyFamilyId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestDeliveryPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("RequestDeliveryPlaces");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetInputId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Measure")
                        .HasColumnType("float");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BudgetInputId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SupplyGroupId");

                    b.ToTable("RequestItems");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestItemPhase", b =>
                {
                    b.Property<Guid>("RequestItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestItemId", "ProjectPhaseId");

                    b.HasIndex("ProjectPhaseId");

                    b.ToTable("RequestItemPhases");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Supply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorrelativeCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyFamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("SupplyFamilyId");

                    b.HasIndex("SupplyGroupId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.SupplyFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplyFamilies");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.SupplyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplyGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.ProductionDailyPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ExcavatedLength")
                        .HasColumnType("float");

                    b.Property<double>("Excavation")
                        .HasColumnType("float");

                    b.Property<double>("FillLength")
                        .HasColumnType("float");

                    b.Property<double>("Filled")
                        .HasColumnType("float");

                    b.Property<double>("Filling")
                        .HasColumnType("float");

                    b.Property<double>("GranularBaseLength")
                        .HasColumnType("float");

                    b.Property<double>("Installation")
                        .HasColumnType("float");

                    b.Property<double>("InstalledLength")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectFormulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RefilledLength")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TheoreticalLayer")
                        .HasColumnType("float");

                    b.Property<Guid>("WorkFrontHeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkFrontId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFormulaId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerGroupId");

                    b.HasIndex("WorkFrontHeadId");

                    b.HasIndex("WorkFrontId");

                    b.ToTable("ProductionDailyParts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ItemContractualAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemGroup")
                        .HasColumnType("int");

                    b.Property<string>("ItemPhaseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemStakeOutAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ItemUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId");

                    b.ToTable("RdpItems");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpItemAccumulatedAmmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AccumulatedAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RdpItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RdpItemId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("RdpItemAccumulatedAmmounts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpItemFootage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AccumulatedAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PartialAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RdpItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RdpReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("StakeOut")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RdpItemId");

                    b.HasIndex("RdpReportId");

                    b.ToTable("RdpItemFootages");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("RdpReports");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.SewerGroupSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectCalendarWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkFrontHeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isIssued")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarWeekId");

                    b.HasIndex("SewerGroupId");

                    b.HasIndex("WorkFrontHeadId");

                    b.ToTable("SewerGroupSchedules");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.SewerGroupScheduleActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectFormulaActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupDailyScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFormulaActivityId");

                    b.HasIndex("SewerGroupDailyScheduleId");

                    b.HasIndex("SewerManifoldId");

                    b.ToTable("SewerGroupScheduleActivities");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.SewerGroupScheduleActivityDaily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FootageDaily")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SewerGroupScheduleActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SewerGroupScheduleActivityId");

                    b.ToTable("SewerGroupScheduleActivityDailies");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<Guid>("QuarryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SewerLineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuarryId");

                    b.HasIndex("SewerLineId")
                        .IsUnique();

                    b.ToTable("CompactionDensityCertificates");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompactionDensityCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DensityPercentage")
                        .HasColumnType("float");

                    b.Property<double>("DryDensity")
                        .HasColumnType("float");

                    b.Property<Guid>("FillingLaboratoryTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<int>("Layer")
                        .HasColumnType("int");

                    b.Property<double>("Moisture")
                        .HasColumnType("float");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WetDensity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompactionDensityCertificateId");

                    b.HasIndex("FillingLaboratoryTestId");

                    b.ToTable("CompactionDensityCertificateDetails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CertificateFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FirstResult")
                        .HasColumnType("float");

                    b.Property<string>("For07FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("For07SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SecondResult")
                        .HasColumnType("float");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConcreteQualityCertificates");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcreteQualityCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Segment")
                        .HasColumnType("int");

                    b.Property<int>("SegmentNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SewerBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteQualityCertificateId");

                    b.HasIndex("SewerBoxId");

                    b.ToTable("ConcreteQualityCertificateDetails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.DischargeManifold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BallTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookPZF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookPZO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClosedZTest")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EquipmentCertificate2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForthPipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Leveling")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MirrorTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("MirrorTestVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonkeyBallTestVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OpenZTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("PipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProtocolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatPZC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatPZF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SewerManifoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThridPipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoomTestVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCertificate2Id");

                    b.HasIndex("EquipmentCertificateId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerManifoldId");

                    b.ToTable("DischargeManifolds");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentCertificateOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentCertificateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRenovations")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCertificateOwnerId");

                    b.HasIndex("EquipmentCertificateTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentCertificates");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentOwners");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateRenewal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Days15")
                        .HasColumnType("bit");

                    b.Property<bool>("Days30")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EquipmentCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EquipmentCertificateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EquipmentCertificateUserOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentCertifyingEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAVoid")
                        .HasColumnType("bit");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("PatternCalibrationRenewalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RenewalOrder")
                        .HasColumnType("int");

                    b.Property<int>("SituationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCertificateId");

                    b.HasIndex("EquipmentCertificateUserOperatorId");

                    b.HasIndex("EquipmentCertifyingEntityId");

                    b.HasIndex("PatternCalibrationRenewalId");

                    b.ToTable("EquipmentCertificateRenewals");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateRenewalApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentCertificateRenewalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCertificateRenewalId");

                    b.ToTable("EquipmentCertificateRenewalApplicationUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateResponsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentResponsibles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PillColor")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentCertificateTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateUserOperator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentCertificateUserOperators");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertifyingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertifyingEntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EquipmentCertifyingEntities");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FillingLaboratoryTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CertificateIssuerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaterialMoisture")
                        .HasColumnType("float");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<double>("MaxDensity")
                        .HasColumnType("float");

                    b.Property<double>("OptimumMoisture")
                        .HasColumnType("float");

                    b.Property<int>("OriginType")
                        .HasColumnType("int");

                    b.Property<Guid?>("OriginTypeFillingLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecordNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateIssuerId");

                    b.HasIndex("OriginTypeFillingLaboratoryId");

                    b.ToTable("FillingLaboratoryTests");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FoldingFor05", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DryDensity")
                        .HasColumnType("float");

                    b.Property<Guid>("FillingLaboratoryTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LayerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MoisturePercentage")
                        .HasColumnType("float");

                    b.Property<double>("PercentageRealCompaction")
                        .HasColumnType("float");

                    b.Property<double>("PercentageRequiredCompaction")
                        .HasColumnType("float");

                    b.Property<Guid>("SewerManifoldFor05Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WetDensity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FillingLaboratoryTestId");

                    b.HasIndex("SewerManifoldFor05Id");

                    b.ToTable("FoldingFor05s");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FoldingFor37A", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SewerManifoldFor37AId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeldingType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SewerManifoldFor37AId");

                    b.ToTable("FoldingFor37As");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.InstructionalProcedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InstructionalProcedures");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.OriginTypeFillingLaboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginTypeFLName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("OriginTypeFillingLaboratories");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.PatternCalibration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRenovations")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PatternCalibrations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.PatternCalibrationRenewal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Days15")
                        .HasColumnType("bit");

                    b.Property<bool>("Days30")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EquipmentCertifyingEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatternCalibrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RenewalOrder")
                        .HasColumnType("int");

                    b.Property<string>("Requestioner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCertifyingEntityId");

                    b.HasIndex("PatternCalibrationId");

                    b.ToTable("PatternCalibrationRenewals");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.PatternCalibrationRenewalApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatternCalibrationRenewalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatternCalibrationRenewalId");

                    b.ToTable("PatternCalibrationRenewalApplicationUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor05", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Filling")
                        .HasColumnType("float");

                    b.Property<string>("LayerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LayersNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TheoreticalLayer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerManifoldId");

                    b.ToTable("SewerManifoldFor05s");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor29", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AreaToValue")
                        .HasColumnType("float");

                    b.Property<double>("AsphaltArea")
                        .HasColumnType("float");

                    b.Property<DateTime>("AsphaltDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AsphaltType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("For01ProtocolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Pavement2InReview")
                        .HasColumnType("float");

                    b.Property<double>("Pavement3InMixedReview")
                        .HasColumnType("float");

                    b.Property<double>("Pavement3InReview")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Thickness")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerManifoldId");

                    b.ToTable("SewerManifoldFor29s");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor37A", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ElectrofusionsNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndElectrofusionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("For01ProtocolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForthPipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotMeltsNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondPipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SewerManifoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartElectrofusionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThridPipeBatch")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerManifoldId");

                    b.ToTable("SewerManifoldFor37As");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor47", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BZiRealTerrainType")
                        .HasColumnType("int");

                    b.Property<int>("BZjRealTerrainType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("For01ProtocolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LengthOfDiggingN")
                        .HasColumnType("float");

                    b.Property<double>("LengthOfDiggingR")
                        .HasColumnType("float");

                    b.Property<double>("LengthOfDiggingSR")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkBookNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkBookRegistryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkBookSeat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerManifoldId");

                    b.ToTable("SewerManifoldFor47s");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SigProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SigProcesses");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Security.RacsReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionIdentifiesSA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionIdentifiesSC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ICQ01")
                        .HasColumnType("bit");

                    b.Property<bool>("ICQ02")
                        .HasColumnType("bit");

                    b.Property<bool>("ICQ03")
                        .HasColumnType("bit");

                    b.Property<bool>("ICQ04")
                        .HasColumnType("bit");

                    b.Property<bool>("ICQ05")
                        .HasColumnType("bit");

                    b.Property<bool>("IdentifiesSA")
                        .HasColumnType("bit");

                    b.Property<bool>("IdentifiesSC")
                        .HasColumnType("bit");

                    b.Property<string>("LiftingImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftingObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservationImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SAQ01")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ02")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ03")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ04")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ05")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ06")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ07")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ08")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ09")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ10")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ11")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ12")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ13")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ14")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ15")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ16")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ17")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ18")
                        .HasColumnType("bit");

                    b.Property<bool>("SAQ19")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ01")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ02")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ03")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ04")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ05")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ06")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ07")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ08")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ09")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ10")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ11")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ12")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ13")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ14")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ15")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ16")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ17")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ18")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ19")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ20")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ21")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ22")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ23")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ24")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ25")
                        .HasColumnType("bit");

                    b.Property<bool>("SCQ26")
                        .HasColumnType("bit");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifyActs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifyAnotherAlternative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifyAppliedCorrections")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifyConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("RacsReports");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Security.RacsSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RacsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RacsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("RacsSummaries");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetFormulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BudgetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CollaboratorEQ")
                        .HasColumnType("float");

                    b.Property<double>("CollaboratorMO")
                        .HasColumnType("float");

                    b.Property<double>("ContractualEQ")
                        .HasColumnType("float");

                    b.Property<double>("ContractualMO")
                        .HasColumnType("float");

                    b.Property<double>("ContractualMaterials")
                        .HasColumnType("float");

                    b.Property<double>("ContractualSubcontract")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<double>("Metered")
                        .HasColumnType("float");

                    b.Property<string>("NumberItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BudgetFormulaId");

                    b.HasIndex("BudgetTitleId");

                    b.HasIndex("BudgetTypeId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetFormula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDirectCost")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BudgetFormulas");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GoalUnitPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("SaleUnitPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("SupplyFamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SupplyFamilyId");

                    b.HasIndex("SupplyGroupId");

                    b.ToTable("BudgetInputs");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInputAllocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetFormulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetInputId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<double>("Measure")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetFormulaId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetInputId");

                    b.HasIndex("BudgetTitleId");

                    b.ToTable("BudgetInputAllocations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInputAllocationGroup", b =>
                {
                    b.Property<Guid>("BudgetInputAllocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BudgetInputId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Measure")
                        .HasColumnType("float");

                    b.HasKey("BudgetInputAllocationId", "SewerGroupId");

                    b.HasIndex("BudgetInputId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("BudgetInputAllocationGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BudgetTitles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BudgetTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.FoldingF7", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("ExcavatedLength")
                        .HasColumnType("float");

                    b.Property<double>("GranularBaseLength")
                        .HasColumnType("float");

                    b.Property<double>("InstalledLength")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductionDailyPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RefilledLength")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductionDailyPartId");

                    b.ToTable("FoldingF7s");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<float>("Measure")
                        .HasColumnType("real");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectBudgedItemParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectBudgetCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectBudgetItemParent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectBudgedItemParentId");

                    b.HasIndex("ProjectBudgetCategoryId");

                    b.ToTable("ProjectBudgedItems");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBudgetCategories");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ArrivalLevel")
                        .HasColumnType("float");

                    b.Property<double>("BottomLevel")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CoverLevel")
                        .HasColumnType("float");

                    b.Property<double>("Diameter")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SewerBoxType")
                        .HasColumnType("int");

                    b.Property<int>("SewerOrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("TerrainType")
                        .HasColumnType("int");

                    b.Property<double>("Thickness")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Code", "ProcessType");

                    b.ToTable("SewerBoxes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBoxFootage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SewerBoxFootages");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBoxFootageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<decimal>("RealFootage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SewerBoxFootageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TechnicalRecordFootage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SewerBoxFootageId");

                    b.ToTable("SewerBoxFootageItems");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Destination")
                        .HasColumnType("int");

                    b.Property<Guid?>("ForemanEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ForemanWorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectCollaboratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WorkComponent")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkFrontHeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkFrontId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkStructure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForemanEmployeeId");

                    b.HasIndex("ForemanWorkerId");

                    b.HasIndex("ProjectCollaboratorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkFrontHeadId");

                    b.HasIndex("WorkFrontId");

                    b.ToTable("SewerGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroupProjectHabilitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectHabilitationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectHabilitationId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("SewerGroupProjectHabilitations");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AddedLately")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AverageDepthSewerBox")
                        .HasColumnType("float");

                    b.Property<double>("AverageDepthSewerLine")
                        .HasColumnType("float");

                    b.Property<string>("DrainageArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExcavationLength")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthForNormal")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthForRocky")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthForSemirocous")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthPercentForNormal")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthPercentForRocky")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthPercentForSemirocous")
                        .HasColumnType("float");

                    b.Property<Guid>("FinalSewerBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasFor47")
                        .HasColumnType("bit");

                    b.Property<double>("HorizontalDistanceOnAxis")
                        .HasColumnType("float");

                    b.Property<Guid>("InitialSewerBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("InstalledPipelineLength")
                        .HasColumnType("float");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<double>("NominalDiameter")
                        .HasColumnType("float");

                    b.Property<int>("PipelineClass")
                        .HasColumnType("int");

                    b.Property<int>("PipelineType")
                        .HasColumnType("int");

                    b.Property<double>("Piping")
                        .HasColumnType("float");

                    b.Property<Guid>("QualificationZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Slope")
                        .HasColumnType("float");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<int>("TerrainType")
                        .HasColumnType("int");

                    b.Property<double>("TiltedPipelineLengthOnAxis")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FinalSewerBoxId");

                    b.HasIndex("InitialSewerBoxId");

                    b.HasIndex("QualificationZoneId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("SewerLines");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DitchHeight")
                        .HasColumnType("float");

                    b.Property<double>("DitchLevelPercent")
                        .HasColumnType("float");

                    b.Property<bool>("HasFor01")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFor05")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFor29")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFor37A")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFor47")
                        .HasColumnType("bit");

                    b.Property<double>("LengthBetweenHAxles")
                        .HasColumnType("float");

                    b.Property<double>("LengthBetweenIAxles")
                        .HasColumnType("float");

                    b.Property<double>("LengthOfDigging")
                        .HasColumnType("float");

                    b.Property<double>("LengthOfPipelineInstalled")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Pavement2In")
                        .HasColumnType("float");

                    b.Property<double>("Pavement3In")
                        .HasColumnType("float");

                    b.Property<double>("Pavement3InMixed")
                        .HasColumnType("float");

                    b.Property<double>("PavementWidth")
                        .HasColumnType("float");

                    b.Property<int>("PipelineClass")
                        .HasColumnType("int");

                    b.Property<double>("PipelineDiameter")
                        .HasColumnType("float");

                    b.Property<int>("PipelineType")
                        .HasColumnType("int");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductionDailyPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SewerBoxEndId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SewerBoxStartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TerrainType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionDailyPartId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SewerBoxEndId");

                    b.HasIndex("SewerBoxStartId");

                    b.ToTable("SewerManifolds");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldCostPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Equipment")
                        .HasColumnType("float");

                    b.Property<double>("HeightMax")
                        .HasColumnType("float");

                    b.Property<double>("HeightMin")
                        .HasColumnType("float");

                    b.Property<double>("Materials")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SecurityFactor")
                        .HasColumnType("float");

                    b.Property<double>("Services")
                        .HasColumnType("float");

                    b.Property<int>("TerrainType")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Workforce")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SewerManifoldCostPerformances");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldCostPerformanceSewerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectCalendarWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SecurityFactor")
                        .HasColumnType("float");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldCostPerformanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WorkforceEquipment")
                        .HasColumnType("float");

                    b.Property<double>("WorkforceEquipmentService")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarWeekId");

                    b.HasIndex("SewerGroupId");

                    b.HasIndex("SewerManifoldCostPerformanceId");

                    b.ToTable("SewerManifoldCostPerformanceSewerGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LetterType")
                        .HasColumnType("int");

                    b.Property<Guid>("SewerManifoldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LetterId");

                    b.HasIndex("SewerManifoldId");

                    b.ToTable("SewerManifoldLetters");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductionDailyPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerManifoldReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductionDailyPartId");

                    b.HasIndex("SewerManifoldExecutionId");

                    b.HasIndex("SewerManifoldReviewId");

                    b.ToTable("SewerManifoldReferences");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Temporal.ForTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForTests");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityMinimum")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("StockApplicationUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockRoof", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoofQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("SewerGroupId");

                    b.HasIndex("StockId");

                    b.ToTable("StockRoofs");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickUpResponsible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferencePurchaseOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherType")
                        .HasColumnType("int");

                    b.Property<bool>("WasDelivered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("StockVouchers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockVoucherDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalePriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StockVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("StockVoucherId");

                    b.ToTable("StockVoucherDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Aggregation.Quarry", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.BusinessResponsible", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentation", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationType", "LegalDocumentationType")
                        .WithMany()
                        .HasForeignKey("LegalDocumentationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationLoad", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationRenovation", "LegalDocumentationRenovation")
                        .WithMany()
                        .HasForeignKey("LegalDocumentationRenovationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationType", "LegalDocumentationType")
                        .WithMany()
                        .HasForeignKey("LegalDocumentationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationRenovation", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentation", "LegalDocumentation")
                        .WithMany()
                        .HasForeignKey("LegalDocumentationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationRenovationApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.LegalDocumentationRenovation", "LegalDocumentationRenovation")
                        .WithMany()
                        .HasForeignKey("LegalDocumentationRenovationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.Professional", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.Skill", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.Professional", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.SkillRenovation", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Bidding.SkillRenovationApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Bidding.SkillRenovation", "SkillRenovation")
                        .WithMany()
                        .HasForeignKey("SkillRenovationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.IssuerTarget", "Issuer")
                        .WithMany("Letters")
                        .HasForeignKey("IssuerId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterDocumentCharacteristic", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterInterestGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.InterestGroup", "InterestGroup")
                        .WithMany("LetterInterestGroups")
                        .HasForeignKey("InterestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("LetterInterestGroups")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterIssuerTarget", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.IssuerTarget", "IssuerTarget")
                        .WithMany("LetterIssuerTargets")
                        .HasForeignKey("IssuerTargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("LetterIssuerTargets")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterLetter", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("References")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Reference")
                        .WithMany("ReferencedBy")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterStatus", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("LetterStatus")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.WorkbookSeat", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Workbook", "Workbook")
                        .WithMany("WorkbookSeats")
                        .HasForeignKey("WorkbookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.Equipment", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryOperator", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryType", "EquipmentMachineryType")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoft", "EquipmentMachineryTypeSoft")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeSoftId");

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTransport", "EquipmentMachineryTypeTransport")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeTransportId");

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeType", "EquipmentMachineryTypeType")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeTypeId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryResponsible", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoft", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProviderFolding", "EquipmentProviderFolding")
                        .WithMany()
                        .HasForeignKey("EquipmentProviderFoldingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProvider", "EquipmentProvider")
                        .WithMany()
                        .HasForeignKey("EquipmentProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoft", "EquipmentMachinerySoft")
                        .WithMany()
                        .HasForeignKey("EquipmentMachinerySoftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPart", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoft", "EquipmentMachinerySoft")
                        .WithMany()
                        .HasForeignKey("EquipmentMachinerySoftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoft", "EquipmentMachineryTypeSoft")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeSoftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProvider", "EquipmentProvider")
                        .WithMany()
                        .HasForeignKey("EquipmentProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPartFolding", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryOperator", "EquipmentMachineryOperator")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryOperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPart", "EquipmentMachinerySoftPart")
                        .WithMany()
                        .HasForeignKey("EquipmentMachinerySoftPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoftActivity", "EquipmentMachineryTypeSoftActivity")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeSoftActivityId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPartPlus", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachinerySoftPartFolding", "EquipmentMachinerySoftPartFolding")
                        .WithMany()
                        .HasForeignKey("EquipmentMachinerySoftPartFoldingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoftActivity", "EquipmentMachineryTypeSoftActivity")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeSoftActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoftActivity", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoft", "EquipmentMachineryTypeSoft")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeSoftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTransportActivity", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTransport", "EquipmentMachineryTypeTransport")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeTransportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTypeActivity", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeType", "EquipmentMachineryTypeType")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProvider", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProviderFolding", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryType", "EquipmentMachineryType")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeSoft", "EquipmentMachineryTypeSoft")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeSoftId");

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeTransport", "EquipmentMachineryTypeTransport")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeTransportId");

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentMachineryTypeType", "EquipmentMachineryTypeType")
                        .WithMany()
                        .HasForeignKey("EquipmentMachineryTypeTypeId");

                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentProvider", "EquipmentProvider")
                        .WithMany()
                        .HasForeignKey("EquipmentProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.FuelProvider", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondAdd", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondGuarantor", "BondGuarantor")
                        .WithMany()
                        .HasForeignKey("BondGuarantorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondType", "BondType")
                        .WithMany()
                        .HasForeignKey("BondTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetTitle", "BudgetTitle")
                        .WithMany()
                        .HasForeignKey("BudgetTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondAddProjectResponsible", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondFile", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondRenovation", "BondRenovation")
                        .WithMany()
                        .HasForeignKey("BondRenovationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondLoad", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondGuarantor", "BondGuarantor")
                        .WithMany()
                        .HasForeignKey("BondGuarantorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondRenovation", "BondRenovation")
                        .WithMany()
                        .HasForeignKey("BondRenovationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondType", "BondType")
                        .WithMany()
                        .HasForeignKey("BondTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetTitle", "BudgetTitle")
                        .WithMany()
                        .HasForeignKey("BudgetTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondRenovation", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondAdd", "BondAdd")
                        .WithMany()
                        .HasForeignKey("BondAddId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Finance.BondRenovationApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Finance.BondRenovation", "BondRenovation")
                        .WithMany()
                        .HasForeignKey("BondRenovationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "WorkPosition")
                        .WithMany()
                        .HasForeignKey("WorkPositionId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserInterestGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.InterestGroup", "InterestGroup")
                        .WithMany("UserInterestGroups")
                        .HasForeignKey("InterestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany("UserInterestGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserProject", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserRole", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.CertificateIssuer", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.Destination", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroupEmail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.InterestGroup", "InterestGroup")
                        .WithMany()
                        .HasForeignKey("InterestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectCollaborator", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectFormula", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectFormulaActivity", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectFormula", "ProjectFormula")
                        .WithMany()
                        .HasForeignKey("ProjectFormulaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectFormulaSewerGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectFormula", "ProjectFormula")
                        .WithMany()
                        .HasForeignKey("ProjectFormulaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectHabilitation", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectPhase", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.QualificationZone", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.SystemPhase", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkComponent", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFront", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.SystemPhase", "SystemPhase")
                        .WithMany()
                        .HasForeignKey("SystemPhaseId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFrontHead", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkStructure", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Employee", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "CurrentPosition")
                        .WithMany()
                        .HasForeignKey("CurrentPositionId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "EntryPosition")
                        .WithMany()
                        .HasForeignKey("EntryPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", "PensionFundAdministrator")
                        .WithMany("Users")
                        .HasForeignKey("PensionFundAdministratorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollConceptFormula", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollConcept", "PayrollConcept")
                        .WithMany()
                        .HasForeignKey("PayrollConceptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollVariable", "PayrollVariable")
                        .WithMany()
                        .HasForeignKey("PayrollVariableId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementDetail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollConcept", "PayrollConcept")
                        .WithMany()
                        .HasForeignKey("PayrollConceptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", "PayrollMovementHeader")
                        .WithMany("PayrollMovementDetails")
                        .HasForeignKey("PayrollMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", "ProjectCalendarWeek")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarWeekId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollParameter", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollPensionFundAdministratorRate", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", "PayrollMovementHeader")
                        .WithMany()
                        .HasForeignKey("PayrollMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", "PensionFundAdministrator")
                        .WithMany()
                        .HasForeignKey("PensionFundAdministratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWeekSummary", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", "ProjectCalendarWeek")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerCategoryWage", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", "PayrollMovementHeader")
                        .WithMany()
                        .HasForeignKey("PayrollMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerVariable", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", "PayrollMovementHeader")
                        .WithMany()
                        .HasForeignKey("PayrollMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollVariable", "PayrollVariable")
                        .WithMany()
                        .HasForeignKey("PayrollVariableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarMonth", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", "ProjectCalendar")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", "ProjectCalendar")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectPayrollResponsible", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Worker", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", "PensionFundAdministrator")
                        .WithMany()
                        .HasForeignKey("PensionFundAdministratorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany("Workers")
                        .HasForeignKey("SewerGroupId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "WorkerPosition")
                        .WithMany()
                        .HasForeignKey("WorkerPositionId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerCovidCheck", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerDailyTask", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerInvoiceSend", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerMedicalRest", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerWorkPeriod", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", "PensionFundAdministrator")
                        .WithMany()
                        .HasForeignKey("PensionFundAdministratorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "WorkerPosition")
                        .WithMany()
                        .HasForeignKey("WorkerPositionId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24FirstPartGallery", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24FirstPart", "SewerManifoldFor24FirstPart")
                        .WithMany("for24FirstPartGallery")
                        .HasForeignKey("SewerManifoldFor24FirstPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24SecondPartAction", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24SecondPart", "SewerManifoldFor24SecondPart")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor24SecondPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24SecondPartEquipment", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24SecondPart", "SewerManifoldFor24SecondPart")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor24SecondPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.For24SecondPartGallery", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24SecondPart", "SewerManifoldFor24SecondPart")
                        .WithMany("for24SecondPartGallery")
                        .HasForeignKey("SewerManifoldFor24SecondPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.NewSIGProcess", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24FirstPart", "SewerManifoldFor24FirstPart")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor24FirstPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24SecondPart", "SewerManifoldFor24SecondPart")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor24SecondPartId");

                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24ThirdPart", "SewerManifoldFor24ThirdPart")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor24ThirdpartId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24FirstPart", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.NewSIGProcess", "NewSIGProcess")
                        .WithMany()
                        .HasForeignKey("NewSIGProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24SecondPart", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24FirstPart", "SewerManifoldFor24FirstPart")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor24FirstPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24ThirdPart", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.IntegratedManagementSystem.SewerManifoldFor24SecondPart", "SewerManifoldFor24SecondPart")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor24SecondPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.TechnicalLibraryFile", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Business", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "ForeignBank")
                        .WithMany()
                        .HasForeignKey("ForeignBankId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyFamily", "SupplyFamily")
                        .WithMany()
                        .HasForeignKey("SupplyFamilyId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyGroup", "SupplyGroup")
                        .WithMany()
                        .HasForeignKey("SupplyGroupId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "TaxBank")
                        .WithMany()
                        .HasForeignKey("TaxBankId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.BusinessFile", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Business", "Business")
                        .WithMany("BusinessFiles")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Order", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.OrderItem", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.RequestItem", "RequestItem")
                        .WithMany()
                        .HasForeignKey("RequestItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Supply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Provider", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "ForeignBank")
                        .WithMany()
                        .HasForeignKey("ForeignBankId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyFamily", "SupplyFamily")
                        .WithMany()
                        .HasForeignKey("SupplyFamilyId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyGroup", "SupplyGroup")
                        .WithMany()
                        .HasForeignKey("SupplyGroupId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Bank", "TaxBank")
                        .WithMany()
                        .HasForeignKey("TaxBankId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.ProviderFile", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany("ProviderFiles")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.ProviderSupplyFamily", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyFamily", "SupplyFamily")
                        .WithMany()
                        .HasForeignKey("SupplyFamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.ProviderSupplyGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyGroup", "SupplyGroup")
                        .WithMany()
                        .HasForeignKey("SupplyGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Request", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyFamily", "SupplyFamily")
                        .WithMany()
                        .HasForeignKey("SupplyFamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestDeliveryPlace", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestItem", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInput", "BudgetInput")
                        .WithMany("RequestItems")
                        .HasForeignKey("BudgetInputId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Request", "Request")
                        .WithMany("RequestItems")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyGroup", "SupplyGroup")
                        .WithMany()
                        .HasForeignKey("SupplyGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestItemPhase", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectPhase", "ProjectPhase")
                        .WithMany("RequestItemPhases")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.RequestItem", "RequestItem")
                        .WithMany("RequestItemPhases")
                        .HasForeignKey("RequestItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.RequestUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.Request", "Request")
                        .WithMany("RequestUsers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany("RequestUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Logistics.Supply", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.MeasurementUnit", "MeasurementUnit")
                        .WithMany("Supplies")
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyFamily", "SupplyFamily")
                        .WithMany("Supplies")
                        .HasForeignKey("SupplyFamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyGroup", "SupplyGroup")
                        .WithMany("Supplies")
                        .HasForeignKey("SupplyGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.ProductionDailyPart", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectFormula", "ProjectFormula")
                        .WithMany()
                        .HasForeignKey("ProjectFormulaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkFrontHead", "WorkFrontHead")
                        .WithMany()
                        .HasForeignKey("WorkFrontHeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkFront", "WorkFront")
                        .WithMany()
                        .HasForeignKey("WorkFrontId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpItem", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpItemAccumulatedAmmount", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Production.RdpItem", "RdpItem")
                        .WithMany()
                        .HasForeignKey("RdpItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpItemFootage", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Production.RdpItem", "RdpItem")
                        .WithMany()
                        .HasForeignKey("RdpItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Production.RdpReport", "RdpReport")
                        .WithMany()
                        .HasForeignKey("RdpReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.RdpReport", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.SewerGroupSchedule", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", "ProjectCalendarWeek")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkFrontHead", "WorkFrontHead")
                        .WithMany()
                        .HasForeignKey("WorkFrontHeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.SewerGroupScheduleActivity", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectFormulaActivity", "ProjectFormulaActivity")
                        .WithMany()
                        .HasForeignKey("ProjectFormulaActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Production.SewerGroupSchedule", "SewerGroupDailySchedule")
                        .WithMany()
                        .HasForeignKey("SewerGroupDailyScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifold")
                        .WithMany()
                        .HasForeignKey("SewerManifoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Production.SewerGroupScheduleActivityDaily", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Production.SewerGroupScheduleActivity", "SewerGroupScheduleActivity")
                        .WithMany()
                        .HasForeignKey("SewerGroupScheduleActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Aggregation.Quarry", "Quarry")
                        .WithMany()
                        .HasForeignKey("QuarryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerLine", "SewerLine")
                        .WithOne("CompactionDensityCertificate")
                        .HasForeignKey("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", "SewerLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificateDetail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", "CompactionDensityCertificate")
                        .WithMany("CompactionDensityCertificateDetails")
                        .HasForeignKey("CompactionDensityCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.FillingLaboratoryTest", "FillingLaboratoryTest")
                        .WithMany()
                        .HasForeignKey("FillingLaboratoryTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificateDetail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificate", "ConcreteQualityCertificate")
                        .WithMany("ConcreteQualityCertificateDetails")
                        .HasForeignKey("ConcreteQualityCertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "SewerBox")
                        .WithMany()
                        .HasForeignKey("SewerBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.DischargeManifold", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificate", "EquipmentCertificate2")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificate2Id");

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificate", "EquipmentCertificate")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificateId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifold")
                        .WithMany()
                        .HasForeignKey("SewerManifoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificate", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateOwner", "EquipmentCertificateOwner")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificateOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateType", "EquipmentCertificateType")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificateTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateOwner", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateRenewal", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificate", "EquipmentCertificate")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateUserOperator", "EquipmentCertificateUserOperator")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificateUserOperatorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertifyingEntity", "EquipmentCertifyingEntity")
                        .WithMany()
                        .HasForeignKey("EquipmentCertifyingEntityId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.PatternCalibrationRenewal", "PatternCalibrationRenewal")
                        .WithMany()
                        .HasForeignKey("PatternCalibrationRenewalId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateRenewalApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateRenewal", "EquipmentCertificateRenewal")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificateRenewalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateResponsible", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateType", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertificateUserOperator", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.EquipmentCertifyingEntity", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FillingLaboratoryTest", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.CertificateIssuer", "CertificateIssuer")
                        .WithMany()
                        .HasForeignKey("CertificateIssuerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.OriginTypeFillingLaboratory", "OriginTypeFillingLaboratory")
                        .WithMany()
                        .HasForeignKey("OriginTypeFillingLaboratoryId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FoldingFor05", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.FillingLaboratoryTest", "FillingLaboratoryTest")
                        .WithMany()
                        .HasForeignKey("FillingLaboratoryTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor05", "SewerManifoldFor05")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor05Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FoldingFor37A", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor37A", "SewerManifoldFor37A")
                        .WithMany()
                        .HasForeignKey("SewerManifoldFor37AId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.OriginTypeFillingLaboratory", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.PatternCalibration", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.PatternCalibrationRenewal", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.EquipmentCertifyingEntity", "EquipmentCertifyingEntity")
                        .WithMany()
                        .HasForeignKey("EquipmentCertifyingEntityId");

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.PatternCalibration", "PatternCalibration")
                        .WithMany()
                        .HasForeignKey("PatternCalibrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.PatternCalibrationRenewalApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.PatternCalibrationRenewal", "PatternCalibrationRenewal")
                        .WithMany()
                        .HasForeignKey("PatternCalibrationRenewalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor05", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifold")
                        .WithMany()
                        .HasForeignKey("SewerManifoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor29", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifold")
                        .WithMany()
                        .HasForeignKey("SewerManifoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor37A", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifold")
                        .WithMany()
                        .HasForeignKey("SewerManifoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.SewerManifoldFor47", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifold")
                        .WithMany()
                        .HasForeignKey("SewerManifoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Security.RacsReport", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Security.RacsSummary", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.Budget", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetFormula", "BudgetFormula")
                        .WithMany()
                        .HasForeignKey("BudgetFormulaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetTitle", "BudgetTitle")
                        .WithMany()
                        .HasForeignKey("BudgetTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetType", "BudgetType")
                        .WithMany()
                        .HasForeignKey("BudgetTypeId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetFormula", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInput", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyFamily", "SupplyFamily")
                        .WithMany()
                        .HasForeignKey("SupplyFamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Logistics.SupplyGroup", "SupplyGroup")
                        .WithMany()
                        .HasForeignKey("SupplyGroupId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInputAllocation", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetFormula", "BudgetFormula")
                        .WithMany()
                        .HasForeignKey("BudgetFormulaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInput", "BudgetInput")
                        .WithMany("BudgetInputAllocations")
                        .HasForeignKey("BudgetInputId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetTitle", "BudgetTitle")
                        .WithMany()
                        .HasForeignKey("BudgetTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInputAllocationGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInputAllocation", "BudgetInputAllocation")
                        .WithMany("BudgetInputAllocationGroups")
                        .HasForeignKey("BudgetInputAllocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetInput", null)
                        .WithMany("BudgetInputAllocationGroups")
                        .HasForeignKey("BudgetInputId");

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany("BudgetInputAllocationGroups")
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.BudgetTitle", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.FoldingF7", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Production.ProductionDailyPart", "ProductionDailyPart")
                        .WithMany()
                        .HasForeignKey("ProductionDailyPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgedItem", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgedItem", "ProjectBudgedItemParent")
                        .WithMany("ProjectBudgetItemChildrens")
                        .HasForeignKey("ProjectBudgedItemParentId");

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgetCategory", "ProjectBudgetCategory")
                        .WithMany()
                        .HasForeignKey("ProjectBudgetCategoryId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgetCategory", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBoxFootageItem", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBoxFootage", "SewerBoxFootage")
                        .WithMany()
                        .HasForeignKey("SewerBoxFootageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Employee", "ForemanEmployee")
                        .WithMany("SewerGroupsInCharge")
                        .HasForeignKey("ForemanEmployeeId");

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "ForemanWorker")
                        .WithMany("SewerGroupsInCharge")
                        .HasForeignKey("ForemanWorkerId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectCollaborator", "ProjectCollaborator")
                        .WithMany()
                        .HasForeignKey("ProjectCollaboratorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkFrontHead", "WorkFrontHead")
                        .WithMany("SewerGroups")
                        .HasForeignKey("WorkFrontHeadId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkFront", "WorkFront")
                        .WithMany("SewerGroups")
                        .HasForeignKey("WorkFrontId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroupProjectHabilitation", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectHabilitation", "ProjectHabilitation")
                        .WithMany()
                        .HasForeignKey("ProjectHabilitationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerLine", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "FinalSewerBox")
                        .WithMany()
                        .HasForeignKey("FinalSewerBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "InitialSewerBox")
                        .WithMany()
                        .HasForeignKey("InitialSewerBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.QualificationZone", "QualificationZone")
                        .WithMany()
                        .HasForeignKey("QualificationZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Production.ProductionDailyPart", "ProductionDailyPart")
                        .WithMany()
                        .HasForeignKey("ProductionDailyPartId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "SewerBoxEnd")
                        .WithMany()
                        .HasForeignKey("SewerBoxEndId");

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "SewerBoxStart")
                        .WithMany()
                        .HasForeignKey("SewerBoxStartId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldCostPerformance", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldCostPerformanceSewerGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", "ProjectCalendarWeek")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldCostPerformance", "SewerManifoldCostPerformance")
                        .WithMany()
                        .HasForeignKey("SewerManifoldCostPerformanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldLetter", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany()
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifold")
                        .WithMany()
                        .HasForeignKey("SewerManifoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifoldReference", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Production.ProductionDailyPart", "ProductionDailyPart")
                        .WithMany()
                        .HasForeignKey("ProductionDailyPartId");

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifoldExecution")
                        .WithMany()
                        .HasForeignKey("SewerManifoldExecutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerManifold", "SewerManifoldReview")
                        .WithMany()
                        .HasForeignKey("SewerManifoldReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Warehouse.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockRoof", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Warehouse.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockVoucher", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId");

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Warehouse.StockVoucherDetail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Warehouse.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Warehouse.StockVoucher", "StockVoucher")
                        .WithMany()
                        .HasForeignKey("StockVoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
