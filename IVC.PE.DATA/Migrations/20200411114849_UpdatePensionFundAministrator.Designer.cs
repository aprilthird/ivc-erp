// <auto-generated />
using System;
using IVC.PE.DATA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IVC.PE.DATA.Migrations
{
    [DbContext(typeof(IvcDbContext))]
    [Migration("20200411114849_UpdatePensionFundAministrator")]
    partial class UpdatePensionFundAministrator
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Aggregation.Quarry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Quarries");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.IssuerTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IssuerTargets");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IssuerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseTermDays")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IssuerId");

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterInterestGroup", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterestGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LetterId", "InterestGroupId");

                    b.HasIndex("InterestGroupId");

                    b.ToTable("LetterInterestGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterIssuerTarget", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssuerTargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LetterId", "IssuerTargetId");

                    b.HasIndex("IssuerTargetId");

                    b.ToTable("LetterIssuerTargets");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterLetter", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LetterId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("LetterLetters");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterStatus", b =>
                {
                    b.Property<Guid>("LetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LetterId", "Status");

                    b.ToTable("LetterStatus");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.Workbook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Workbooks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.WorkbookSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Answered")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkbookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WroteBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkbookId");

                    b.ToTable("WorkbookSeats");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Propietary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("BelongsToMainOffice")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("NoEmail")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("WorkArea")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WorkPositionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserInterestGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("InterestGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "InterestGroupId");

                    b.HasIndex("InterestGroupId");

                    b.ToTable("UserInterestGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.CertificateIssuer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CertificateIssuers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.Foreman", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Foremen");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("InterestGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroupEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InterestGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InterestGroupId");

                    b.ToTable("InterestGroupEmails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectCollaboratorGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCollaboratorGroupId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCollaborators");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectCollaboratorGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectCollaboratorGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectPhase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.QualificationZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("QualificationZones");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.SystemPhase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SystemPhases");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFront", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SystemPhaseId");

                    b.ToTable("WorkFronts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFrontHead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkFrontHeads");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkPositions");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntryPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PensionFundAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PensionFundUniqueIdentificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPositionId");

                    b.HasIndex("EntryPositionId");

                    b.HasIndex("PensionFundAdministratorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollConcept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayrollConcepts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollConceptFormula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAffectedToAfp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToEsSalud")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToOnp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToQta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAffectedToRetJud")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputableToCTS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputableToGrati")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputableToVacac")
                        .HasColumnType("bit");

                    b.Property<int>("LaborRegimeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PayrollConceptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayrollVariableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollConceptId");

                    b.HasIndex("PayrollVariableId");

                    b.ToTable("PayrollConceptFormulas");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayrollConceptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayrollMovementHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollConceptId");

                    b.HasIndex("PayrollMovementHeaderId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PayrollMovementDetails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ConafovicerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DollarExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("EsSaludMasVidaCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaximumInsurableRemuneration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MobilityCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProjectCalendarMonthID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectCalendarWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SCTRRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("UIT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnionFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarMonthID");

                    b.HasIndex("ProjectCalendarWeekId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PayrollMovementHeaders");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollPensionFundAdministratorRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DisabilityInsuranceRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EarlyRetirementRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FlowComissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FundRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MixedComissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PayrollMovementHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PensionFundAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollMovementHeaderId");

                    b.HasIndex("PensionFundAdministratorId");

                    b.ToTable("PayrollPensionFundAdministratorRates");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PayrollVariables");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerCategoryWage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BUCRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DayWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PayrollMovementHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkerCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayrollMovementHeaderId");

                    b.ToTable("PayrollWorkerCategoryWages");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayrollVariableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectCalendarMonthId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectCalendarWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayrollVariableId");

                    b.HasIndex("ProjectCalendarMonthId");

                    b.HasIndex("ProjectCalendarWeekId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PayrollWorkerVariables");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PensionFundAdministrators");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FirstDayOfThCalendar")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCalendars");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("MonthEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MonthStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("YearMonthNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarId");

                    b.ToTable("ProjectCalendarMonths");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WeekEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("YearWeekNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCalendarId");

                    b.ToTable("ProjectCalendarWeeks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Origin")
                        .HasColumnType("int");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PensionFundAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PensionFundUniqueIdentificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkerPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Workgroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PensionFundAdministratorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkerPositionId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerDailyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Hours100Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Hours60Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursHoliday")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursMedicalLeave")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursMedicalRest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursNormal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HoursPaternityLeave")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerDailyTasks");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkerPositions");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileCount")
                        .HasColumnType("int");

                    b.Property<string>("RUC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.TechnicalLibraryFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("TechnicalLibraryFiles");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<Guid>("QuarryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SewerLineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuarryId");

                    b.HasIndex("SewerLineId")
                        .IsUnique();

                    b.ToTable("CompactionDensityCertificates");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompactionDensityCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DensityPercentage")
                        .HasColumnType("float");

                    b.Property<double>("DryDensity")
                        .HasColumnType("float");

                    b.Property<Guid>("FillingLaboratoryTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<int>("Layer")
                        .HasColumnType("int");

                    b.Property<double>("Moisture")
                        .HasColumnType("float");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WetDensity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompactionDensityCertificateId");

                    b.HasIndex("FillingLaboratoryTestId");

                    b.ToTable("CompactionDensityCertificateDetails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CertificateFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FirstResult")
                        .HasColumnType("float");

                    b.Property<string>("For07FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("For07SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SecondResult")
                        .HasColumnType("float");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConcreteQualityCertificates");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcreteQualityCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Segment")
                        .HasColumnType("int");

                    b.Property<int>("SegmentNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SewerBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteQualityCertificateId");

                    b.HasIndex("SewerBoxId");

                    b.ToTable("ConcreteQualityCertificateDetails");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FillingLaboratoryTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CertificateIssuerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaterialMoisture")
                        .HasColumnType("float");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<double>("MaxDensity")
                        .HasColumnType("float");

                    b.Property<double>("OptimumMoisture")
                        .HasColumnType("float");

                    b.Property<int>("OriginType")
                        .HasColumnType("int");

                    b.Property<string>("RecordNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateIssuerId");

                    b.ToTable("FillingLaboratoryTests");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProductionDailyPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("ProductionDailyParts");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<float>("Measure")
                        .HasColumnType("real");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectBudgedItemParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectBudgetCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectBudgetItemParent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectBudgedItemParentId");

                    b.HasIndex("ProjectBudgetCategoryId");

                    b.ToTable("ProjectBudgedItems");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBudgetCategories");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Bottom")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Cover")
                        .HasColumnType("float");

                    b.Property<string>("DrainageArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("InputOutput")
                        .HasColumnType("float");

                    b.Property<double>("InternalDiameter")
                        .HasColumnType("float");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<int>("TerrainType")
                        .HasColumnType("int");

                    b.Property<double>("Thickness")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("SewerBoxes");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Destination")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectCollaboratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WorkComponent")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkFrontHeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkFrontId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkStructure")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCollaboratorId");

                    b.HasIndex("WorkFrontHeadId");

                    b.HasIndex("WorkFrontId");

                    b.HasIndex("WorkerId");

                    b.ToTable("SewerGroups");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AddedLately")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AverageDepthSewerBox")
                        .HasColumnType("float");

                    b.Property<double>("AverageDepthSewerLine")
                        .HasColumnType("float");

                    b.Property<string>("DrainageArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExcavationLength")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthForNormal")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthForRocky")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthForSemirocous")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthPercentForNormal")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthPercentForRocky")
                        .HasColumnType("float");

                    b.Property<double>("ExcavationLengthPercentForSemirocous")
                        .HasColumnType("float");

                    b.Property<Guid>("FinalSewerBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasFor47")
                        .HasColumnType("bit");

                    b.Property<double>("HorizontalDistanceOnAxis")
                        .HasColumnType("float");

                    b.Property<Guid>("InitialSewerBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("InstalledPipelineLength")
                        .HasColumnType("float");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<double>("NominalDiameter")
                        .HasColumnType("float");

                    b.Property<int>("PipelineClass")
                        .HasColumnType("int");

                    b.Property<int>("PipelineType")
                        .HasColumnType("int");

                    b.Property<double>("Piping")
                        .HasColumnType("float");

                    b.Property<Guid>("QualificationZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SewerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Slope")
                        .HasColumnType("float");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<int>("TerrainType")
                        .HasColumnType("int");

                    b.Property<double>("TiltedPipelineLengthOnAxis")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FinalSewerBoxId");

                    b.HasIndex("InitialSewerBoxId");

                    b.HasIndex("QualificationZoneId");

                    b.HasIndex("SewerGroupId");

                    b.ToTable("SewerLines");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Aggregation.Quarry", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.IssuerTarget", "Issuer")
                        .WithMany("Letters")
                        .HasForeignKey("IssuerId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterInterestGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.InterestGroup", "InterestGroup")
                        .WithMany("LetterInterestGroups")
                        .HasForeignKey("InterestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("LetterInterestGroups")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterIssuerTarget", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.IssuerTarget", "IssuerTarget")
                        .WithMany("LetterIssuerTargets")
                        .HasForeignKey("IssuerTargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("LetterIssuerTargets")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterLetter", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("References")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Reference")
                        .WithMany("ReferencedBy")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.LetterStatus", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Letter", "Letter")
                        .WithMany("LetterStatus")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.DocumentaryControl.WorkbookSeat", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.DocumentaryControl.Workbook", "Workbook")
                        .WithMany("WorkbookSeats")
                        .HasForeignKey("WorkbookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.EquipmentMachinery.Equipment", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.EquipmentMachinery.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUser", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "WorkPosition")
                        .WithMany()
                        .HasForeignKey("WorkPositionId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserInterestGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.InterestGroup", "InterestGroup")
                        .WithMany("UserInterestGroups")
                        .HasForeignKey("InterestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany("UserInterestGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserProject", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ApplicationUserRole", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.CertificateIssuer", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.InterestGroupEmail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.InterestGroup", "InterestGroup")
                        .WithMany()
                        .HasForeignKey("InterestGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectCollaborator", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectCollaboratorGroup", "ProjectCollaboratorGroup")
                        .WithMany()
                        .HasForeignKey("ProjectCollaboratorGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.ProjectPhase", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.QualificationZone", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.SystemPhase", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFront", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.SystemPhase", "SystemPhase")
                        .WithMany()
                        .HasForeignKey("SystemPhaseId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.General.WorkFrontHead", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Employee", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "CurrentPosition")
                        .WithMany()
                        .HasForeignKey("CurrentPositionId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "EntryPosition")
                        .WithMany()
                        .HasForeignKey("EntryPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", "PensionFundAdministrator")
                        .WithMany("Users")
                        .HasForeignKey("PensionFundAdministratorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollConceptFormula", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollConcept", "PayrollConcept")
                        .WithMany()
                        .HasForeignKey("PayrollConceptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollVariable", "PayrollVariable")
                        .WithMany()
                        .HasForeignKey("PayrollVariableId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementDetail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollConcept", "PayrollConcept")
                        .WithMany()
                        .HasForeignKey("PayrollConceptId");

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", "PayrollMovementHeader")
                        .WithMany("PayrollMovementDetails")
                        .HasForeignKey("PayrollMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarMonth", "ProjectCalendarMonth")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarMonthID");

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", "ProjectCalendarWeek")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarWeekId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollPensionFundAdministratorRate", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", "PayrollMovementHeader")
                        .WithMany("PayrollPensionFundAdministratorRates")
                        .HasForeignKey("PayrollMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", "PensionFundAdministrator")
                        .WithMany()
                        .HasForeignKey("PensionFundAdministratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerCategoryWage", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollMovementHeader", "PayrollMovementHeader")
                        .WithMany("PayrollWorkerCategoryWages")
                        .HasForeignKey("PayrollMovementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.PayrollWorkerVariable", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PayrollVariable", "PayrollVariable")
                        .WithMany()
                        .HasForeignKey("PayrollVariableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarMonth", "ProjectCalendarMonth")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarMonthId");

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", "ProjectCalendarWeek")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarWeekId");

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarMonth", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", "ProjectCalendar")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendarWeek", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.ProjectCalendar", "ProjectCalendar")
                        .WithMany()
                        .HasForeignKey("ProjectCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.Worker", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.PensionFundAdministrator", "PensionFundAdministrator")
                        .WithMany()
                        .HasForeignKey("PensionFundAdministratorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkPosition", "WorkerPosition")
                        .WithMany()
                        .HasForeignKey("WorkerPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.HumanResources.WorkerDailyTask", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectPhase", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.TechnicalLibraryFile", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.LegalTechnicalLibrary.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Aggregation.Quarry", "Quarry")
                        .WithMany()
                        .HasForeignKey("QuarryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerLine", "SewerLine")
                        .WithOne("CompactionDensityCertificate")
                        .HasForeignKey("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", "SewerLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificateDetail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.CompactionDensityCertificate", "CompactionDensityCertificate")
                        .WithMany("CompactionDensityCertificateDetails")
                        .HasForeignKey("CompactionDensityCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.FillingLaboratoryTest", "FillingLaboratoryTest")
                        .WithMany()
                        .HasForeignKey("FillingLaboratoryTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificateDetail", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.Quality.ConcreteQualityCertificate", "ConcreteQualityCertificate")
                        .WithMany("ConcreteQualityCertificateDetails")
                        .HasForeignKey("ConcreteQualityCertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "SewerBox")
                        .WithMany("ConcreteQualityCertificateDetails")
                        .HasForeignKey("SewerBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.Quality.FillingLaboratoryTest", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.CertificateIssuer", "CertificateIssuer")
                        .WithMany()
                        .HasForeignKey("CertificateIssuerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProductionDailyPart", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgedItem", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgedItem", "ProjectBudgedItemParent")
                        .WithMany("ProjectBudgetItemChildrens")
                        .HasForeignKey("ProjectBudgedItemParentId");

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgetCategory", "ProjectBudgetCategory")
                        .WithMany()
                        .HasForeignKey("ProjectBudgetCategoryId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.ProjectBudgetCategory", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ProjectCollaborator", "ProjectCollaborator")
                        .WithMany()
                        .HasForeignKey("ProjectCollaboratorId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkFrontHead", "WorkFrontHead")
                        .WithMany("SewerGroups")
                        .HasForeignKey("WorkFrontHeadId");

                    b.HasOne("IVC.PE.ENTITIES.Models.General.WorkFront", "WorkFront")
                        .WithMany("SewerGroups")
                        .HasForeignKey("WorkFrontId");

                    b.HasOne("IVC.PE.ENTITIES.Models.HumanResources.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerLine", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "FinalSewerBox")
                        .WithMany("FinalSewerLines")
                        .HasForeignKey("FinalSewerBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerBox", "InitialSewerBox")
                        .WithMany("InitialSewerLines")
                        .HasForeignKey("InitialSewerBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.General.QualificationZone", "QualificationZone")
                        .WithMany()
                        .HasForeignKey("QualificationZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IVC.PE.ENTITIES.Models.TechnicalOffice.SewerGroup", "SewerGroup")
                        .WithMany()
                        .HasForeignKey("SewerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IVC.PE.ENTITIES.Models.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
